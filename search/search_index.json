{"config":{"lang":["en","ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yomitan","text":"<p>\ud83d\udc4b Yomitan is the successor to Yomichan (migration guide) which was sunset by its owner on Feb 26, 2023. We have made a number of foundational changes to ensure the project stays alive, works on latest browser versions, and is easy to contribute to.</p> <p>\ud83d\udce2 New contributors welcome!</p> <p>\ud83d\udce2 Interested in adding a new language to Yomitan? See here for thorough documentation!</p>"},{"location":"#what-is-yomitan","title":"What is Yomitan?","text":"<p>Yomitan turns your web browser into a tool for building language literacy by helping you read texts that would otherwise be too difficult to tackle in a variety of supported languages.</p> <p>Yomitan provides powerful features not available in other browser-based dictionaries:</p> <ul> <li>\ud83d\udcac Interactive popup definition window for displaying search results.</li> <li>\ud83d\udd0a Built-in native pronunciation audio with the ability to add your own custom audio sources.</li> <li>\u270d\ufe0f Kanji stroke order diagrams are just a click away.</li> <li>\ud83d\udcdd Automatic flashcard creation for the Anki flashcard program via the AnkiConnect plugin.</li> <li>\ud83d\udd0d Custom search page for easily executing custom search queries.</li> <li>\ud83d\udcd6 Support for multiple dictionary formats including EPWING via the Yomitan Import tool.</li> <li>\u2728 Clean, modern code makes it easy for developers to contribute new features and languages.</li> </ul> <p> </p>"},{"location":"#helpful-information","title":"Helpful information","text":"<ul> <li>\u2728 Migrating from Yomichan (legacy)</li> <li>Dictionaries</li> <li>\ud83d\udcda Recommended Dictionaries</li> <li>\ud83d\uddc2\ufe0f Importing and exporting dictionaries</li> <li>\ud83d\udee0\ufe0f Making Yomitan Dictionaries</li> <li>Anki Integration</li> <li>\ud83d\udcc7 Anki integration and flashcard creation guide</li> <li>\ud83d\udd27 Anki handlebar templates</li> <li>Advanced Features</li> <li>\u2328\ufe0f Keyboard shortcuts</li> <li>\ud83d\udd0d Advanced options, including MeCab</li> <li>\ud83d\udd0a Adding custom audio sources</li> <li>Troubleshooting</li> <li>\ud83d\udd77\ufe0f Known browser bugs</li> <li>\u2753 Frequently asked questions</li> <li>\ud83d\udd12 Browser Permissions</li> <li>\ud83c\udf0e Supported Languages</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Yomitan comes in two flavors: stable and testing. New changes are initially introduced into the testing version, and after some time spent ensuring that they are relatively bug free, they will be promoted to the stable version. If you are technically savvy and don't mind submitting issues on GitHub, try the testing version; otherwise, the stable version will be your best bet. Check contributing for more information on how to help.</p> <ul> <li> <p>Google Chrome</p> </li> <li> <p>stable</p> </li> <li> <p>testing</p> </li> <li> <p>Mozilla Firefox</p> </li> <li>stable</li> <li>testing \u203b</li> </ul> <p>\u203b Unlike Chrome, Firefox does not allow extensions meant for testing to be hosted in the marketplace. You will have to download the desired version and side-load it yourself. You only need to do this once, and you will get updates automatically.</p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<ol> <li> <p>Click the  Yomitan button in the browser bar to open the quick-actions popup.</p> <p></p> <ul> <li>The  cog button will open the Settings page.</li> <li>The  magnifying glass button will open the Search page.</li> <li>The  question mark button will open the Information page.</li> <li>The  profile button will appear when multiple profiles exist, allowing the current profile to be quickly changed.</li> </ul> </li> <li> <p>Import the dictionaries you wish to use for term and kanji searches; head over to the dictionary docs to get set up! If you do not have any dictionaries installed or enabled, Yomitan will warn you that it is not ready for use by displaying an orange exclamation mark over its icon. This exclamation mark will disappear once you have installed and enabled at least one dictionary.</p> <p></p> </li> <li> <p>Webpage text can be scanned by moving the cursor while holding a modifier key, which is Shift by default. If definitions are found for the text at the cursor position, a popup window containing term definitions will open. This window can be dismissed by clicking anywhere outside of it.</p> <p></p> </li> <li> <p>Click on the  speaker button to hear the term pronounced by a native speaker. If an audio sample is not available, you will hear a short click instead. For more options, see Audio Configuration.</p> </li> <li> <p>Click on individual kanji in the term definition results to view additional information about those characters, including stroke order diagrams, readings, meanings, and other useful data.</p> <p></p> </li> </ol> <p>To further enhance your Yomitan experience, it's worth integrating with Anki, a spaced-repetition flashcard program to help solidify the words you encounter.</p>"},{"location":"#changes","title":"Changes","text":"<p>While we have made some substantial changes, the majority of the extension's functionality is thanks to hard work of FooSoft and many other incredible open source contributors from 2016-2023.</p> <p>Major changes:</p> <ul> <li>\ud83c\udf10 Added multi-language support!</li> <li>\ud83d\udcaa Completed the Manifest V2 \u2192 V3 transition, read why here.</li> <li>\u26a1 Switched to using ECMAScript modules and npm-sourced dependencies.</li> <li>\ud83d\udd27 Implemented an end-to-end CI/CD pipeline.</li> <li>\ud83e\uddea Switched to standard testing frameworks, vitest and playwrights.</li> </ul> <p>In addition, we have made important bug fixes and minor enhancements:</p> <ul> <li>\u26a1 Improved dictionary import speeds by 2x~10x.</li> <li>\ud83d\udcda Added functionality to import/export multiple dictionaries, enabling portability across devices.</li> <li>\u2728 And more.</li> </ul> <p>Since the owner requested forks be uniquely named, we have chosen a new name, Yomitan (-tan is an honorific used for anthropomorphic moe characters).</p>"},{"location":"#contributing","title":"Contributing","text":"<p>\ud83d\ude80 Dip your toes into contributing by looking at issues with the label good-first-issue.</p> <p>Since this is a distributed effort, we highly welcome new contributors! Feel free to browse the issue tracker, and read our contributing guidelines.</p> <p>Here are some ways anyone can help:</p> <ul> <li>Try using the Yomitan dev build. Not only do you get cutting edge features, but you can help uncover bugs and give feedback to developers early on.</li> <li>Document any UI/UX friction in Github Issues. We're looking to make Yomitan more accessible to non-technical users.</li> <li>All the issues in <code>area/bug</code> older than 2 months need help reproducing. If anything interests you, please try to reproduce it and report your results. We can't easily tell if these issues are one-off, have since been resolved, or are no longer relevant.</li> </ul> <p>The current active maintainers of Yomitan spend a lot of their time debugging and triaging issues. When someone files a bug report, we need to assess the frequency and severity of the bug. It is extremely helpful if we get multiple reports of people who experience a bug or people who can contribute additional detail to an existing bug report.</p> <p>If you're looking to code, please let us know what you plan on working on before submitting a Pull Request. This gives the core maintainers an opportunity to provide feedback early on before you dive too deep. You can do this by opening a Github Issue with the proposal.</p> <p>Some contributions we always appreciate:</p> <ul> <li>Well-written tests covering different functionalities. This includes playwright tests, benchmark tests, and unit tests.</li> <li>Increasing our type coverage.</li> <li>More and better documentation!</li> </ul> <p>Information on how to setup and build the codebase can be found here.</p> <p>If you want to add or improve support for a language, read the documentation on language features.</p> <p>Feel free to join us on TheMoeWay Discord \ud83d\udc07 at #yomitan-development.</p>"},{"location":"#third-party-libraries","title":"Third-Party Libraries","text":"<p>Yomitan uses several third-party libraries to function.</p> Name Installed version License type Link @zip.js/zip.js 2.7.32 BSD-3-Clause git+https://github.com/gildas-lormeau/zip.js.git dexie 3.2.4 Apache-2.0 git+https://github.com/dfahlander/Dexie.js.git dexie-export-import 4.0.7 Apache-2.0 git+https://github.com/dexie/Dexie.js.git yomitan-handlebars 1.0.0 MIT n/a parse5 7.1.2 MIT git://github.com/inikulin/parse5.git wanakana 5.3.1 MIT git+ssh://git@github.com/WaniKani/WanaKana.git hangul.js 0.2.6 MIT git+https://github.com/e-/Hangul.js.git"},{"location":"advanced/advanced-options/","title":"Advanced options, including MeCab","text":""},{"location":"advanced/advanced-options/#advanced-options","title":"Advanced Options","text":"<p>Click the <code>Advanced</code> toggle switch in the bottom left corner of the Settings page to enable advanced options.</p>"},{"location":"advanced/advanced-options/#parse-sentences-using-mecab","title":"Parse sentences using MeCab","text":"<p>MeCab is a third-party program which uses its own dictionaries and parsing algorithm to decompose sentences into individual words. MeCab may provide more accurate parsing results than Yomitan's internal parser.</p> <p>In order for Yomitan to use it, both MeCab and a native messaging component must be installed. A setup guide can be found here.</p>"},{"location":"advanced/audio/","title":"Audio","text":""},{"location":"advanced/audio/#default-audio-sources","title":"Default audio sources","text":"<p>After looking up a term, you can click on the  speaker button to hear the term's pronunciation. When searching for audio, multiple audio sources are checked until the first source with audio for the term is found. If no audio is found, you will hear a short click instead. Right-clicking the  button allows choosing the source manually.</p>"},{"location":"advanced/audio/#japanese","title":"Japanese","text":"<p>The default audio sources for Japanese are:</p> <ul> <li>JapanesePod101</li> <li>Jisho.org</li> </ul>"},{"location":"advanced/audio/#other-languages","title":"Other languages","text":"<p>The default audio sources for other languages are from Wikimedia Commons:</p> <ul> <li>Lingua Libre</li> <li>Wiktionary</li> </ul> <p>While Commons has audio for many languages, some of them have limited coverage, and you may want to add additional sources, as described below.</p>"},{"location":"advanced/audio/#configuration","title":"Configuration","text":"<p>Audio sources can be configured in <code>Settings</code> &gt; <code>Audio</code> &gt; <code>Configure audio playback sources</code> to reorder them or add new ones. Besides the four sources mentioned above, you can also use your browser's inbuilt text-to-speech (TTS) engine or add a custom URL source:</p>"},{"location":"advanced/audio/#text-to-speech-tts","title":"Text-to-speech (TTS)","text":"<p>To enable this, just add a new playback source with the <code>Text-to-speech</code> type and choose your desired voice. This is the simplest way to get pronunciation audio, though there a few points to keep in mind:</p> <ul> <li>TTS voices vary between browsers and so might not support all languages. For instance, Microsoft Edge offers a wide selection of free Azure natural voices for a variety of languages. Edge provides over 300 voices, compared to around 25 in Google Chrome (see here for a list of supported languages).</li> <li>TTS audio can be inaccurate for languages with complex pronunciation such as Japanese, where words can have multiple possible readings and pitch accents.</li> <li>\u26a0\ufe0f Note that the TTS voices cannot be sent to Anki; this is a limitation of the browser SpeechSynthesis API.</li> </ul>"},{"location":"advanced/audio/#custom-url","title":"Custom URL","text":"<p>You can add a custom URL from which audio will be fetched. One use case for this is fetching audio from Forvo:</p>"},{"location":"advanced/audio/#yomichan-forvo-server","title":"Yomichan Forvo Server","text":"<p>Forvo is currently the largest online pronunciation database, with native pronunciation audio for various languages. One way to get Forvo audio in Yomitan is via the Yomichan Forvo Server Anki add-on. It fetches from Forvo, at the cost of a slight delay. After installing it in Anki, add a <code>Custom URL (JSON)</code> audio source with the URL <code>http://localhost:8770?term={term}&amp;reading={reading}&amp;language=en</code> (replacing <code>en</code> with the desired language's ISO code).</p>"},{"location":"advanced/keyboard-shortcuts/","title":"Keyboard shortcuts","text":""},{"location":"advanced/keyboard-shortcuts/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>The following shortcuts are globally available:</p> Shortcut Action Alt + Insert Open search page. Alt + Delete Toggle extension on/off. <p>The following shortcuts are available on search results:</p> Shortcut Action Esc Cancel current search. Alt + PgUp Page up through results. Alt + PgDn Page down through results. Alt + End Go to last result. Alt + Home Go to first result. Alt + Up Go to previous result. Alt + Down Go to next result. Alt + B Go to back to source term. Alt + E Add current term as expression to Anki. Alt + R Add current term as reading to Anki. Alt + P Play audio for current term. Alt + K Add current kanji to Anki."},{"location":"anki/","title":"Anki integration","text":""},{"location":"anki/#anki-integration","title":"Anki Integration","text":"<p>Yomitan features automatic flashcard creation for Anki, a free application designed to help you retain knowledge. This feature requires the prior installation of an Anki plugin called AnkiConnect. Check the respective project page for more information about how to set up this software.</p>"},{"location":"anki/#flashcard-configuration","title":"Flashcard Configuration","text":"<p>Before flashcards can be automatically created, you must configure the templates used to create term and/or kanji notes. If you are unfamiliar with Anki deck and model management, this would be a good time to reference the Anki Manual. In short, you must specify what information should be included in the flashcards that Yomitan creates through AnkiConnect.</p> <p>Flashcard fields can be configured with the following steps:</p> <ol> <li>Open the Yomitan options page and scroll down to the section labeled Anki Options.</li> <li>Tick the checkbox labeled Enable Anki integration (Anki must be running with AnkiConnect installed).</li> <li>Select the type of template to configure by clicking on either the Terms or Kanji tabs.</li> <li>Select the Anki deck and model to use for new creating new flashcards of this type.</li> <li>Fill the model fields with markers corresponding to the information you wish to include (several can be used at     once).</li> <li> <p>(optional, advanced) Users can also configure the actual Handlebars templates used to create     the flashcard contents.</p> </li> </ol> <p>When creating your model for Yomitan, make sure that you pick a unique field to be first; fields that will contain <code>{expression}</code> or <code>{character}</code> are ideal candidates for this. Anki does not allow duplicate flashcards to be added to a deck by default; it uses the first field in the model to check for duplicates. For example, if you have <code>{reading}</code> configured to be the first field in your model and \u6a4b\u306f\u3057 is already in your deck, you will not be able to create a flashcard for \u7bb8\u306f\u3057 because they share the same reading.</p>"},{"location":"anki/#markers-for-term-cards","title":"Markers for Term Cards","text":"Marker Description <code>{audio}</code> Audio of the term's pronunciation from one of the audio sources (if available). <code>{clipboard-image}</code> An image which is stored in the system clipboard, if present. <code>{clipboard-text}</code> Text which is stored in the system clipboard, if present. <code>{cloze-body}</code> Raw, inflected term as it appeared before being reduced to dictionary form by Yomitan. <code>{cloze-body-kana}</code> Kana reading for <code>{cloze-body}</code>. <code>{cloze-prefix}</code> Fragment of the containing <code>{sentence}</code> starting at the beginning of <code>{sentence}</code> until the beginning of <code>{cloze-body}</code>. <code>{cloze-suffix}</code> Fragment of the containing <code>{sentence}</code> starting at the end of <code>{cloze-body}</code> until the end of <code>{sentence}</code>. <code>{conjugation}</code> Conjugation path from the raw inflected term to the source term. <code>{dictionary}</code> Name of the dictionary from which the card is being created (unavailable in grouped mode). <code>{document-title}</code> Title of the web page that the term appeared in. <code>{expression}</code> Term expressed as kanji (will be displayed in kana if kanji is not available). <code>{frequencies}</code> Frequency information for the term. <code>{frequency-harmonic-rank}</code> The harmonic mean of frequency data for the current term. Defaults to rank 9999999 when frequency data is not found, indicating extremely low rank-based term usage. <code>{frequency-harmonic-occurrence}</code> The harmonic mean of frequency data for the current term. Defaults to 0 occurrences when frequency data is not found, the lowest possible occurrence-based term usage. <code>{frequency-average-rank}</code> The average of frequency data for the current term. Defaults to rank 9999999 when frequency data is not found, indicating extremely low rank-based term usage. <code>{frequency-average-occurrence}</code> The average of frequency data for the current term. Defaults to 0 occurrences when frequency data is not found, the lowest possible occurrence-based term usage. <code>{furigana}</code> Term expressed as kanji with furigana displayed above it (e.g. \u65e5\u672c\u8a9e\u306b\u307b\u3093\u3054). <code>{furigana-plain}</code> Term expressed as kanji with furigana displayed next to it in brackets (e.g. \u65e5\u672c\u8a9e[\u306b\u307b\u3093\u3054]). <code>{glossary}</code> List of definitions for the term (output format depends on whether running in grouped mode). <code>{glossary-brief}</code> List of definitions for the term in a more compact format. <code>{glossary-no-dictionary}</code> List of definitions for the term, except the dictionary tag is omitted. <code>{glossary-first}</code> First definition for the term (output format depends on whether running in grouped mode). <code>{glossary-first-brief}</code> First definition for the term in a more compact format. <code>{glossary-first-no-dictionary}</code> First definition for the term, except the dictionary tag is omitted. <code>{part-of-speech}</code> Part of speech information for the term. <code>{phonetic-transcriptions}</code> List of phonetic transcriptions for the term. <code>{pitch-accents}</code> List of pitch accent downstep notations for the term. <code>{pitch-accent-graphs}</code> List of pitch accent graphs for the term. <code>{pitch-accent-graphs-jj}</code> List of pitch accent graphs for the term (styled after Jidoujisho). <code>{pitch-accent-positions}</code> List of accent downstep positions for the term as a number. <code>{pitch-accent-categories}</code> List of pitch accent categories for the term (e.g. heiban, kifuku, atamadaka, odaka, nakadaka). <code>{reading}</code> Kana reading for the term (empty for terms where the expression is the reading). <code>{screenshot}</code> Screenshot of the web page taken at the time the term was added. <code>{search-query}</code> The full search query shown on the search page. <code>{popup-selection-text}</code> The selected text on the search page or popup. <code>{sentence}</code> Sentence, quote, or phrase that the term appears in from the source content. <code>{sentence-furigana}</code> Sentence, quote, or phrase that the term appears in from the source content, with furigana added. <code>{single-glossary-DICT-NAME}</code> Same as <code>{glossary}</code>, but with entries from only a single dictionary. The dictionary name will likely be modified, use the options from the \u25bc dropdown. <code>{single-glossary-DICT-NAME-brief}</code> See <code>{single-glossary-DICT-NAME}</code> and <code>{glossary-brief}</code>. <code>{single-glossary-DICT-NAME-no-dictionary}</code> See <code>{single-glossary-DICT-NAME}</code> and <code>{glossary-no-dictionary}</code>. <code>{tags}</code> Grammar and usage tags providing information about the term (unavailable in grouped mode). <code>{url}</code> Address of the web page in which the term appeared in."},{"location":"anki/#markers-for-kanji-cards","title":"Markers for Kanji Cards","text":"Marker Description <code>{character}</code> Unicode glyph representing the current kanji. <code>{clipboard-image}</code> An image which is stored in the system clipboard, if present. <code>{clipboard-text}</code> Text which is stored in the system clipboard, if present. <code>{cloze-body}</code> Raw, inflected parent term as it appeared before being reduced to dictionary form by Yomitan. <code>{cloze-prefix}</code> Fragment of the containing <code>{sentence}</code> starting at the beginning of <code>{sentence}</code> until the beginning of <code>{cloze-body}</code>. <code>{cloze-suffix}</code> Fragment of the containing <code>{sentence}</code> starting at the end of <code>{cloze-body}</code> until the end of <code>{sentence}</code>. <code>{dictionary}</code> Name of the dictionary from which the card is being created. <code>{document-title}</code> Title of the web page that the kanji appeared in. <code>{frequencies}</code> Frequency information for the kanji. <code>{frequency-harmonic-rank}</code> The harmonic mean of frequency data for the current kanji. Defaults to rank 9999999 when frequency data is not found, indicating extremely low rank-based kanji usage. <code>{frequency-harmonic-occurrence}</code> The harmonic mean of frequency data for the current kanji. Defaults to 0 occurrences when frequency data is not found, the lowest possible occurrence-based kanji usage. <code>{frequency-average-rank}</code> The average of frequency data for the current kanji. Defaults to rank 9999999 when frequency data is not found, indicating extremely low rank-based kanji usage. <code>{frequency-average-occurrence}</code> The average of frequency data for the current kanji. Defaults to 0 occurrences when frequency data is not found, the lowest possible occurrence-based kanji usage. <code>{glossary}</code> List of definitions for the kanji. <code>{kunyomi}</code> Kunyomi (Japanese reading) for the kanji expressed as hiragana. <code>{onyomi}</code> Onyomi (Chinese reading) for the kanji expressed as katakana. <code>{onyomi-hiragana}</code> Onyomi (Chinese reading) for the kanji expressed as hiragana. <code>{screenshot}</code> Screenshot of the web page taken at the time the kanji was added. <code>{search-query}</code> The full search query shown on the search page. <code>{popup-selection-text}</code> The selected text on the search page or popup. <code>{sentence}</code> Sentence, quote, or phrase that the character appears in from the source content. <code>{sentence-furigana}</code> Sentence, quote, or phrase that the character appears in from the source content, with furigana added. <code>{stroke-count}</code> Number of strokes that the kanji character has. <code>{url}</code> Address of the web page in which the kanji appeared in."},{"location":"anki/#flashcard-creation","title":"Flashcard Creation","text":"<p>Once Yomitan is configured, it becomes trivial to create new flashcards with a single click. You will see the following icons next to term definitions:</p> <ul> <li>Clicking  adds the current expression (e.g. \u98df\u3079\u308b).</li> <li>Clicking  adds the current expression's reading (e.g. \u305f\u3079\u308b).</li> </ul> <p>If Check for card duplicates is on, and a card for the current definition already exists in the deck, you will see the book icon. If When a duplicate is detected is set to <code>Prevent adding</code>, the icons will appear grayed out. If set to <code>Allow adding</code>, the icons will change to:</p> <ul> <li>: to add the expression</li> <li>: to add the reading</li> </ul> <p>Below are some troubleshooting tips you can try if you are unable to create new flashcards:</p> <ul> <li>If all of the buttons appear grayed out, then you should double-check your deck and model configuration settings.</li> <li>If no icons appear at all, make sure that Anki is running in the background and that AnkiConnect has been installed.</li> </ul>"},{"location":"anki/#anki-note-generation","title":"Anki Note Generation","text":"<p>Using the <code>Generate Anki Notes (Experimental)...</code> feature in the settings page it is possible to easily generate and export large amounts of Anki cards.</p> <p>[!WARNING] This feature is experimental!</p> <p>First, get a newline separated list of terms. For example:</p> <pre><code>\u96ea\n\u96e8\n\u7adc\u5dfb\n</code></pre> <p>Enter this list into the large text box in the <code>Anki Note Generator</code> popup window.</p> <p>Next, select either <code>Send to Anki</code> or <code>Export to File</code>.</p> <p>Send to Anki:</p> <p><code>Send to Anki</code> will send all the terms to the active Anki deck using the active Anki model specified on the page. To change the active Anki deck or Anki model, edit them in the <code>Configure Anki card format...</code> setting.</p> <p>Make sure to confirm you are exporting to the correct deck and with the correct Anki model. After the notes are sent to Anki there is no way to automatically undo the changes.</p> <p>To include media in notes sent to Anki, make sure to enable the <code>Add media to notes</code> option. Media includes audio, images, and svgs. Exporting with media may take significantly longer than without it.</p> <p>To prevent duplicate notes being sent to Anki, enable the <code>Prevent sending duplicate notes</code> option. This will check for duplicate notes that already exist. The <code>Check for duplicates across all models</code> and <code>Duplicate card scope</code> settings are used to determine what is considered a duplicate card. This does not remove duplicates in the term list.</p> <p>Export to File:</p> <p><code>Export to File</code> will export all the terms to an Anki deck file using the active Anki card format specified on the page and in Anki's <code>Notes in plain text (.txt)</code> format. After exporting completes you will be prompted to save the file. This file can later be imported into Anki.</p> <p>Media cannot be included when exporting in this format.</p>"},{"location":"anki/templates/","title":"Templates","text":""},{"location":"anki/templates/#helpers","title":"Helpers","text":"<p>Yomitan supports several custom Handlebars helpers for rendering templates. The source code for these templates can be found here.</p>"},{"location":"anki/templates/#dumpobject","title":"<code>dumpObject</code>","text":"<p>Converts an object to a pretty-printed JSON string. This function can be helpful for debugging values when creating templates.</p> Syntax: <code>{{dumpObject object}}</code>  - _`object`_  The object to convert.  Example: <pre><code>&lt;pre&gt;{{dumpObject .}}&lt;/pre&gt;\n</code></pre>  Output:   <pre><code>&lt;pre&gt;{\n    \"key\": \"value\"\n}&lt;/pre&gt;\n</code></pre>  Preview:   <pre><code>{\n    \"key\": \"value\"\n}\n</code></pre>"},{"location":"anki/templates/#furigana","title":"<code>furigana</code>","text":"<p>Converts a definition or expression/reading pair to its furigana representation.</p> Syntax: <code>{{furigana definition}}</code> <code>{{furigana expression reading}}</code>  - _`definition`_    The definition to convert. - _`expression`_    The expression to convert. - _`reading`_  The reading to convert.  Example: <pre><code>{{furigana .}}\n{{furigana \"\u8aad\u3080\" \"\u3088\u3080\"}}\n</code></pre>  Output:   <pre><code>&lt;ruby&gt;\u8aad&lt;rt&gt;\u3088&lt;/rt&gt;&lt;/ruby&gt;\u3080\n</code></pre>  Preview    <pre>\u8aad\u3088\u3080</pre>"},{"location":"anki/templates/#furiganaplain","title":"<code>furiganaPlain</code>","text":"<p>Converts a definition or expression/reading pair to its simplified furigana representation.</p> Syntax: <code>{{furiganaPlain definition}}</code> <code>{{furiganaPlain expression reading}}</code>  - _`definition`_    The definition to convert. - _`expression`_    The expression to convert. - _`reading`_  The reading to convert.  Example: <pre><code>{{~furiganaPlain .~}}\n{{furiganaPlain \"\u8aad\u3080\" \"\u3088\u3080\"}}\n</code></pre>  Output:   <pre><code>\u8aad[\u3088]\u3080\n</code></pre>"},{"location":"anki/templates/#multiline","title":"<code>multiLine</code>","text":"<p>Replaces newline characters with a forced HTML line break <code>&lt;br&gt;</code>.</p> Syntax: <code>{{#multiLine}}text with multiple lines{{/multiLine}}</code> Example: <pre><code>{{#multiLine~}}\nsome\nmultiline\ntext\n{{~/multiLine}}\n</code></pre>  Output:   <pre><code>some&lt;br&gt;multiline&lt;br&gt;text\n</code></pre>  Preview:    <pre>somemultilinetext</pre>"},{"location":"anki/templates/#regexreplace","title":"<code>regexReplace</code>","text":"<p>Uses a regular expression to replace a pattern with the specified text.</p> Syntax: <code>{{#regexReplace regex replacement [flags]}}text-to-modify{{/regexReplace}}</code> <code>{{regexReplace regex replacement [flags] [text-to-modify]...}}</code>  - _`regex`_    The raw string used to create the regular expression. This value is passed to the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor. - _`replacement`_    The text used to replace pattern matches. This supports the standard [special capture group replacements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter) as supported by the web browser. - _`flags`_ _(optional)_    Optional flags to pass to the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor. - _`text-to-modify`_  The text that the regular expression is applied to. If multiple arguments are present, they are all concatenated.  Example: <pre><code>{{#regexReplace \"\\(([^)]*)\\)\" \"$1\" \"g\"~}}Here is (some) (text) (in) (parentheses){{~/regexReplace}}\n</code></pre>  Output:   <pre><code>Here is some text in parentheses\n</code></pre>"},{"location":"anki/templates/#regexmatch","title":"<code>regexMatch</code>","text":"<p>Uses a regular expression to return only the content that matches the pattern.</p> Syntax: <code>{{#regexMatch regex [flags]}}text-to-modify{{/regexMatch}}</code> <code>{{regexMatch regex [flags] [text-to-modify]...}}</code>  - _`regex`_    The raw string used to create the regular expression. This value is passed to the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor. - _`flags`_ _(optional)_    Optional flags to pass to the [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor. - _`text-to-modify`_  The text that the regular expression is applied to. If multiple arguments are present, they are all concatenated.  Example: <pre><code>{{#regexMatch \"\\(([^)]*)\\)\" \"g\"~}}Here is (some) (text) (in) (parentheses){{~/regexMatch}}\n</code></pre>  Output:   <pre><code>(some)(text)(in)(parentheses)\n</code></pre>"},{"location":"anki/templates/#mergetags","title":"<code>mergeTags</code>","text":"<p>Creates a set of all unique tags for the definition and returns a text representation of the tags separated by commas.</p> Syntax: <code>{{mergeTags definition isGroupMode isMergeMode}}</code>  - _`definition`_    The root definition object. - _`isGroupMode`_ _(optional)_    Whether or not the display mode is the 'group' mode. - _`isMergeMode`_  Whether or not the display mode is the 'merge' mode.  Example: <pre><code>{{~mergeTags definition group merge~}}\n</code></pre>  Output:   <pre><code>v5m, vt, JMdict (English)\n</code></pre>"},{"location":"anki/templates/#eachupto","title":"<code>#eachUpTo</code>","text":"<p>Similar to the built-in <code>#each</code> function, but iterates up to a maximum count. If the iterable is falsy or empty, the <code>else</code> condition will be used.</p> Syntax: <code>{{#eachUpTo iterable maxCount}}(modification){{else}}(else-modification){{/eachUpTo}}</code>  - _`iterable`_    The object that should be looped over. A JavaScript [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop is used, so the object only needs to be iterable. - _`maxCount`_ _(optional)_    The maximum number of entries to loop over. - _`modification`_    The template used to modify the value. The context is changed to the current item of iteration. - _`else-modification`_  The template used in case the iterable is falsy or empty. The context is unchanged.  Example: <pre><code>{{~#eachUpTo someArray 5}}{{{.}}}&lt;br&gt;{{else}}Empty{{/mergeTags~}}\n</code></pre>  Output:   <pre><code>someArray[0]&lt;br&gt;someArray[1]&lt;br&gt;someArray[2]&lt;br&gt;someArray[3]&lt;br&gt;someArray[4]&lt;br&gt;\n</code></pre>  Preview:    <pre>someArray[0]someArray[1]someArray[2]someArray[3]someArray[4]</pre>"},{"location":"anki/templates/#spread","title":"<code>spread</code>","text":"<p>Uses the JavaScript spread operator to convert one or more iterables into a single array. This allows it to be used similar to an <code>Array.concat</code> operation.</p> Syntax: <code>{{spread iterable1 iterable2 ... iterableN}}</code>  - _`iterableN`_  A variable amount of iterable objects to combine into a single array.  Example: <pre><code>{{#each (spread array1 array2)}}{{{.}}}&lt;br&gt;{{/each}}\n</code></pre>  Output:   <pre><code>array1[0]&lt;br&gt;array1[1]&lt;br&gt;array2[0]&lt;br&gt;array2[1]&lt;br&gt;\n</code></pre>  Preview:    <pre>array1[0]array1[1]array2[0]array2[1]</pre>"},{"location":"anki/templates/#op","title":"<code>op</code>","text":"<p>Performs a simple operation on one, two, or three arguments. The operations available are:</p> <ul> <li>Unary operators: <code>+</code>, <code>-</code>, <code>~</code>, <code>!</code></li> <li>Binary operators: <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>%</code>, <code>**</code>, <code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&amp;&amp;</code>, <code>||</code></li> <li>Ternary operators: <code>?:</code></li> </ul> <p>If an unknown operator is specified, the <code>undefined</code> value is returned.</p> Syntax: <code>{{op operator operand1 [operand2] [operand3]}}</code>  - _`operator`_    One of the unary, binary, or ternary operators. - _`operand1`_    The first operand of the operation. - _`operand2`_ _(Optional)_   The second operand of the operation. - _`operand3`_ _(Optional)_ The third operand of the operation.  Example: <pre><code>{{#if (op \"===\" value1 value2)}}Values are equal{{/if~}}&lt;br&gt;\n{{~#op \"-\" value1}}{{/op~}}&lt;br&gt;\n{{~op \"?:\" value1 \"a\" \"b\"}}\n</code></pre>  Output:   <pre><code>Values are equal&lt;br&gt;-32&lt;br&gt;a\n</code></pre>  Preview:    <pre>Values are equal-32a</pre>"},{"location":"anki/templates/#get","title":"<code>get</code>","text":"<p>Gets a value from the custom state stack.</p> Syntax: <code>{{get name}}</code>  - _`name`_  The name of the variable to get.  Example: <pre><code>{{get \"some-text\"}}\n</code></pre>  Output:   <pre><code>This is the value of some-text!\n</code></pre>"},{"location":"anki/templates/#set","title":"<code>set</code>","text":"<p>Assigns a value to the custom state stack.</p> Syntax: <code>{{#set name}}value{{/get}}</code> <code>{{set name value}}</code>  - _`name`_    The name of the variable to assign. - _`value`_  The value of the variable.  Example: <pre><code>{{#set \"some-text\"}}This is the value of some-text!{{/set~}}\n{{~set \"some-number\" 32}}\n</code></pre>  Output:   <pre><code>\n</code></pre>"},{"location":"anki/templates/#scope","title":"<code>#scope</code>","text":"<p>Pushes a new variable scope to the custom state stack. Variable assignments are applied to the most recent scope, and variable lookups will start from the most recent scope and work backwards until a value is found.</p> Syntax: <code>{{#scope}}content{{/scope}}</code>  - _`name`_    The name of the variable to assign. - _`value`_  The value of the variable.  Example: <pre><code>{{~set \"key\" 32~}}\n{{~get \"key\"~}},\n{{~#scope~}}\n  {{~#get \"key\"~}},\n  {{~#set \"key\" 64~}}\n  {{~#get \"key\"~}},\n{{~/scope~}}\n{{~get \"key\"~}}\n</code></pre>  Output:   <pre><code>32,32,64,32\n</code></pre>"},{"location":"anki/templates/#property","title":"<code>property</code>","text":"<p>Repeatedly gets a property of an object.</p> Syntax: <code>{{property object property1 property2 ... propertyN}}</code>  - _`object`_    The initial object to use. - _`propertyN`_  A chain of property names to get on the object.  Example: <pre><code>{{property someObject \"field\" 0 \"toString\"}}\n</code></pre>  Output:   <pre><code>function toString() { [native code] }\n</code></pre>"},{"location":"anki/templates/#noop","title":"<code>noop</code>","text":"<p>No-op. Returns the inner contents of the template.</p> Syntax: <code>{{#noop}}content{{/noop}}</code> Example: <pre><code>{{noop}}Unchanged content{{/noop}}\n</code></pre>  Output:   <pre><code>Unchanged content\n</code></pre>"},{"location":"anki/templates/#ismorapitchhigh","title":"<code>isMoraPitchHigh</code>","text":"<p>Returns whether or not a mora will have a high pitch, given the index of the mora and the position of the downstep.</p> Syntax: <code>{{isMoraPitchHigh index position}}</code> Example: <pre><code>{{#if (isMoraPitchHigh 1 2)}}High pitch{{else}}Low pitch{{/if}}\n</code></pre>  Output:   <pre><code>High pitch\n</code></pre>"},{"location":"anki/templates/#getkanamorae","title":"<code>getKanaMorae</code>","text":"<p>Returns an array of the mora for a kana string.</p> Syntax: <code>{{getKanaMorae kana-string}}</code> Example: <pre><code>{{#each (getKanaMorae \"\u3088\u307f\u305f\u3093\")}}{{{.}}}&lt;br&gt;{{/each}}\n</code></pre>  Output:   <pre><code>\u3088&lt;br&gt;\u307f&lt;br&gt;\u305f&lt;br&gt;\u3093&lt;br&gt;\n</code></pre>  Preview:    <pre>\u3088\u307f\u305f\u3093</pre>"},{"location":"anki/templates/#typeof","title":"<code>typeof</code>","text":"<p>Returns the type of a value. <code>#typeof</code> in the block form will always return <code>'string'</code>.</p> Syntax: <code>{{typeof value}}</code> <code>{{#typeof}}value{{/typeof}}</code>  - _`value`_  The value to check.  Example: <pre><code>{{typeof \"\u3088\u307f\u305f\u3093\"}}\n{{typeof 1}}\n{{#typeof}}\u3088\u307f\u305f\u3093{{/typeof}}\n</code></pre>  Output:   <pre><code>string\nnumber\nstring\n</code></pre>"},{"location":"anki/templates/#join","title":"<code>join</code>","text":"<p>Joins the arguments to a single string with a separator, flattening any arguments that are arrays.</p> Syntax: <code>{{join separator value1 value2 valueN...}}</code>  - _`separator`_    The separator string to use between values. - _`valueN`_  An individual value to join into the resulting string  Example: <pre><code>{{set \"index\" 32~}}\n{{~join \"_\" \"yomitan\" (get \"index\") \"value\"}}\n</code></pre>  Output:   <pre><code>yomitan_32_value\n</code></pre>"},{"location":"anki/templates/#concat","title":"<code>concat</code>","text":"<p>Joins the arguments to a single string, without flattening arguments that are arrays.</p> Syntax: <code>{{concat value1 value1 valueN...}}</code>  - _`valueN`_  A value to join into the resulting string  Example: <pre><code>{{set \"index\" 32~}}\n{{~concat \"yomitan_\" (get \"index\") \"_value\"}}\n</code></pre>  Output:   <pre><code>yomitan_32_value\n</code></pre>"},{"location":"anki/templates/#pitchcategories","title":"<code>pitchCategories</code>","text":"<p>Returns an array representing the different pitch categories for a specific term.</p> Syntax: <code>{{pitchCategories @root}}</code>  - _`@root`_  The argument passed should always be the root data object.  Example: <pre><code>[{{#each (pitchCategories @root)}}{{.}}{{#unless @last}}, {{/unless}}{{/each}}]\n</code></pre>  Output:   <pre><code>[heiban, kifuku]\n</code></pre>"},{"location":"anki/templates/#formatglossary","title":"<code>formatGlossary</code>","text":"<p>Formats a glossary entry to a HTML content string. This helper handles image and structured-content generation.</p> Syntax: <code>{{formatGlossary dictionary definitionEntry}}</code>  - _`dictionary`_    The dictionary that the glossary entry belongs to. - _`definitionEntry`_  The definition entry object in raw form.  Example: <pre><code>{{#each glossary}}{{formatGlossary ../dictionary .}}{{/each}}\n</code></pre>  Output:   <pre><code>Here is the content of a gloss, which may include formatted HTML.\n</code></pre>"},{"location":"anki/templates/#hasmedia-getmedia","title":"<code>hasMedia</code> &amp; <code>getMedia</code>","text":"<p>Checks to see if a certain type of media is available for a card and injects the relevant content. These functions are used together in order to request media and other types of optional asynchronous content.</p> Syntax: <code>{{hasMedia type args...}}</code> <code>{{getMedia type args... [escape=true|false]}}</code>  - _`type`_    The type of media to check for. - _`args`_    Additional arguments for the media. The arguments depend on the media type. - _`escape`_ _(optional)_    Whether or not the resulting text should be HTML-escaped. If omitted, defaults to `true`.  **Available media types and arguments**  - <code>\"audio\"</code> - <code>\"screenshot\"</code> - <code>\"clipboardImage\"</code> - <code>\"clipboardText\"</code> - <code>\"popupSelectionText\"</code> - <code>\"textFurigana\" japaneseText readingMode=\"default|hiragana|katakana\"</code> - <code>\"dictionaryMedia\" fileName dictionary=\"Dictionary Name\"</code> Examples: <pre><code>{{#if (hasMedia \"audio\")}}The audio file name is: {{getMedia \"audio\"}}{{/if}}\n\n{{#if (hasMedia \"screenshot\")}}The screenshot file name is: {{getMedia \"screenshot\"}}{{/if}}\n\n{{#if (hasMedia \"clipboardImage\")}}The clipboard image file name is: {{getMedia \"clipboardImage\"}}{{/if}}\n\n{{#if (hasMedia \"clipboardText\")}}The clipboard text is: {{getMedia \"clipboardText\"}}{{/if}}\n\n{{#if (hasMedia \"popupSelectionText\")}}The popup selection text is: {{getMedia \"popupSelectionText\"}}{{/if}}\n\n{{#if (hasMedia \"textFurigana\" \"\u65e5\u672c\u8a9e\")}}This is an example of text with generated furigana: {{getMedia \"textFurigana\" \"\u65e5\u672c\u8a9e\" escape=false}}{{/if}}\n\n{{#if (hasMedia \"dictionaryMedia\" \"image.png\" dictionary=\"Example Dictionary\")}}The remapped file name for image.png is: {{getMedia \"dictionaryMedia\" \"image.png\" dictionary=\"Example Dictionary\"}}{{/if}}\n</code></pre>  Output:   <pre><code>The audio file name is: yomitan_audio_\u306b\u307b\u3093\u3054_\u65e5\u672c\u8a9e.mp3\n\nThe screenshot file name is: yomitan_browser_screenshot_\u306b\u307b\u3093\u3054_\u65e5\u672c\u8a9e.png\n\nThe clipboard image file name is: yomitan_clipboard_image_\u306b\u307b\u3093\u3054_\u65e5\u672c\u8a9e.png\n\nThe clipboard text is: This is the clipboard text\n\nThe selection text is: This is the selection text\n\nThe selection text is: This is the selection text\n\nThis is an example of text with generated furigana: &lt;ruby&gt;\u65e5\u672c\u8a9e&lt;rt&gt;\u306b\u307b\u3093\u3054&lt;/rt&gt;&lt;/ruby&gt;\n\nThe remapped file name for image.png is: yomitan_dictionary_media_1_\u306b\u307b\u3093\u3054_\u65e5\u672c\u8a9e.png\n</code></pre>"},{"location":"anki/templates/#pronunciation","title":"<code>pronunciation</code>","text":"<p>Converts pronunciation information into a formatted HTML content string. The display layout is the same as the system used for generating popup and search page dictionary entries.</p> Syntax: <code>{{pronunciation format=string reading=string downstepPosition=integer [nasalPositions=array] [devoicePositions=array]}}</code>  - _`format`_    The format of the HTML to generate. This can be any of the following values:   - `'text'`   - `'graph'`   - `'position'` - _`reading`_    The kana reading of the term. - _`downstepPosition`_    The mora position of the downstep in the reading. - _`nasalPositions`_ _(optional)_    An array of indices of mora that have a nasal pronunciation. - _`devoicePositions`_ _(optional)_  An array of indices of mora that are devoiced.  Example: <pre><code>{{~pronunciation format='text' reading='\u3088\u3080' downstepPosition=1~}}\n</code></pre>"},{"location":"anki/templates/#hiragana","title":"<code>hiragana</code>","text":"<p>Converts katakana text to hiragana.</p> Syntax: <code>{{hiragana value [keepProlongedSoundMarks=true|false]}}</code> <code>{{#hiragana [keepProlongedSoundMarks=true|false]}}value{{/hiragana}}</code>  - _`value`_    The text to convert. - _`keepProlongedSoundMarks`_ _(optional)_  Whether or not the `\u30fc` character should be kept or converted to a vowel character. Defaults to `false` if not specified.  Example: <pre><code>{{hiragana \"\u3088\u307f\u305f\u3093 \u30e8\u30df\u305f\u3093 \u30e8\u30df\u30bf\u30f3\"}}\n{{#hiragana}}\u3088\u307f\u305f\u3093 \u30e8\u30df\u305f\u3093 \u30e8\u30df\u30bf\u30f3{{/hiragana}}\n{{#hiragana}}\u30ed\u30fc\u30de\u5b57{{/hiragana}}\n{{#hiragana keepProlongedSoundMarks=true}}\u30ed\u30fc\u30de\u5b57{{/hiragana}}\n</code></pre>  Output:   <pre><code>\u3088\u307f\u305f\u3093 \u3088\u307f\u305f\u3093 \u3088\u307f\u305f\u3093\n\u3088\u307f\u305f\u3093 \u3088\u307f\u305f\u3093 \u3088\u307f\u305f\u3093\n\u308d\u3046\u307e\u5b57\n\u308d\u30fc\u307e\u5b57\n</code></pre>"},{"location":"anki/templates/#katakana","title":"<code>katakana</code>","text":"<p>Converts hiragana text to katakana.</p> Syntax: <code>{{katakana text}}</code> <code>{{#katakana}}text{{/katakana}}</code>  - _`text`_  The text to convert.  Example: <pre><code>{{katakana \"\u3088\u307f\u305f\u3093 \u30e8\u30df\u305f\u3093 \u30e8\u30df\u30bf\u30f3\"}}\n{{#katakana}}\u3088\u307f\u305f\u3093 \u30e8\u30df\u305f\u3093 \u30e8\u30df\u30bf\u30f3{{/katakana}}\n</code></pre>  Output:   <pre><code>\u30e8\u30df\u30bf\u30f3 \u30e8\u30df\u30bf\u30f3 \u30e8\u30df\u30bf\u30f3\n\u30e8\u30df\u30bf\u30f3 \u30e8\u30df\u30bf\u30f3 \u30e8\u30df\u30bf\u30f3\n</code></pre>"},{"location":"contributing/","title":"Issues and Features","text":"<p>Issues reported on GitHub should include information about:</p> <ul> <li>What the problem, question, or request is.</li> <li>What browser is being used.</li> <li>What version of Yomitan is being used.</li> <li>If applicable, an export of the settings file.</li> </ul>"},{"location":"contributing/#development","title":"Development","text":"<p>Contributions are welcome from any developers who would like to help out. Below are a few guidelines to ensure contributions have a good level of quality and consistency:</p> <ul> <li>Open GitHub issues to discuss large features before writing code.</li> <li>Follow the conventions and style of the existing code.</li> <li>Test changes using the continuous integration tests included in the repository.</li> <li>Write clean, modern ES6 code (<code>const</code>/<code>let</code>, <code>async</code>/<code>await</code>, arrow functions, etc.)</li> <li>Large pull requests without a clear scope will not be merged.</li> <li>Incomplete or non-standalone features will not be merged.</li> </ul>"},{"location":"contributing/#setup","title":"Setup","text":"<p>Yomitan uses Node.js and npm tools for building and testing. After installing these, the development environment can be set up by running <code>npm ci</code> and subsequently <code>npm run build</code>.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Unit tests, integration tests, and various other tests can be executed by running <code>npm test</code>. Other individual tests can be looked up in the package.json file, and the source for specific tests can be found in the test directory</p>"},{"location":"contributing/#building","title":"Building","text":"<p>By default, the development repository is configured for Chrome, and the ext directory can be directly loaded as an unpacked extension by Chrome. This way, development does not require any additional build steps, and most changes will be automatically updated by the browser. Depending on what files were changed, the extension may sometimes need to be reloaded before the changes take effect.</p> <p>There are two scripts to build the extension to a packaged file for various build targets:</p> <ul> <li>build.bat on Windows</li> <li>build.sh on Linux</li> </ul> <p>Both of these files are convenience scripts which invoke <code>node dev/bin/build.js</code>. The build script can produce several different build files based on manifest configurations defined in manifest-variants.json. Several command line arguments are available for these scripts:</p> <ul> <li><code>[target]</code> - Builds a specific target.</li> <li><code>--all</code> - Builds all targets specified in manifest-variants.json.</li> <li><code>--default</code> - Restores the default manifest file.</li> <li><code>--manifest &lt;target&gt;</code> - Overwrites <code>ext/manifest.json</code> with the manifest variant for the specified build target.</li> <li><code>--dryRun</code> - Runs the full build process (excluding zip building), checking that the configuration is valid.</li> <li><code>--dryRunBuildZip</code> - If <code>--dryRun</code> is also specified, zip building will also be performed in memory; no files are created.</li> <li><code>--version &lt;version&gt;</code> - Sets the version number in the extension manifest. Defaults to 0.0.0.0 if not set.</li> </ul> <p>If no arguments are specified, the command is equivalent to <code>build.bat --all</code>.</p>"},{"location":"contributing/#loading-an-unpacked-build-into-chromium-browsers","title":"Loading an unpacked build into Chromium browsers","text":"<p>After building, you can load the compiled extension into Chromium browsers.</p> <ul> <li>Navigate to the extensions page</li> <li>Turn on the toggle on the top right that says \"Developer Mode\"</li> <li>Click \"Load Unpacked\" on the top left</li> <li>Select the <code>ext</code> folder.</li> </ul> <p>Immediately you should see the \"Welcome\" page!</p> <p>Note: Yomitan may or may not update when you make and save new code changes locally. It depends on what file you've changed. Yomitan runs as collection of two programs. There is the background process called the \"service worker\" and there is the frontend called the \"content_script\". The frontend will reload on save, but to update the backend you need to click on the update icon next to the extension in <code>chrome://extensions/</code>. If you make changes to the manifest you will need to rerun <code>npm run build</code> to regenerate the manifest file.</p>"},{"location":"contributing/#build-tools","title":"Build Tools","text":"<p>The build process can use the 7-zip archiving tool to create the packed zip builds if the 7-zip executable (either <code>7z</code> or <code>7za</code>) is found in the <code>PATH</code> environment variable. Otherwise, the JSZip API is used to generate the files. 7-zip typically provides better compression than JSZip, but the files are otherwise equivalent.</p>"},{"location":"contributing/#manifest","title":"Manifest","text":"<p>Manifest variants for different build targets are specified in manifest-variants.json. This file is used to generate the <code>ext/manifest.json</code> file included in the extension. The generated <code>ext/manfiest.json</code> should not be committed.</p>"},{"location":"contributing/#style","title":"Style","text":"<p>Linting rules are defined for a few types of files, and validation is performed as part of the standard tests run by <code>npm test</code> and the continuous integration process.</p> <ul> <li>.eslintrc.json rules are used for JavaScript files.</li> <li>.stylelintrc.json rules are used for CSS files.</li> <li>.htmlvalidate.json rules are used for HTML files.</li> </ul> <p>In addition, the Markdown All in One VSCode extension is used for formatting markdown files and automatically updating the table of contents.</p>"},{"location":"contributing/language-features/","title":"Contributing to a Language","text":"<p>Improving Yomitan's features for the language(s) you are interested in is pretty simple, and a great way to help yourself and others. This guide will help you get started.</p>"},{"location":"contributing/language-features/#adding-a-language","title":"Adding a Language","text":"<p>If your language is not already available in the Language dropdown, here is how you can add it with just a few lines. As an example, we'll use PR #913, where a first-time contributor added Dutch.</p> language-descriptors.js<pre><code>{\n    iso: 'nl',\n    iso639_3: 'nld',\n    name: 'Dutch',\n    exampleText: 'lezen',\n    textPreprocessors: capitalizationPreprocessors\n}\n</code></pre> <ol> <li>Look up the ISO 639-1 and ISO 639-3 codes for your language. If it is a rarer language it might not have a ISO-639-1 code - if that's the case, use ISO 639-3 for both <code>iso</code> and <code>iso639_3</code>.</li> <li>Place your language in the <code>languageDescriptors</code> array in <code>language-descriptors.js</code>. The languages are sorted alphabetically by ISO code.</li> <li>The example text is usually some form of the verb \"to read\" in your language, but it can be any example you feel is good. This will be shown in the preview popup on the settings page.</li> <li>If your language uses the Latin or Cyrillic script, or another script with capitalization, you will want to use the <code>capitalizationPreprocessors</code>. We'll cover this part in more detail a bit later. The <code>textPreprocessors</code> field can also be left out.</li> </ol> <p>When in doubt, look at the other languages in the file for ideas. The same applies to <code>language-descriptors.d.ts</code>:</p> language-descriptors.d.ts<pre><code>nl: {\n  pre: CapitalizationPreprocessors;\n}\n</code></pre> <p>This is just for some type safety. The first key is the ISO code. Most languages will then only have a <code>pre</code> key (the other one is <code>post</code>), and its value is the type of text preprocessors you used in <code>language-descriptors.js</code>. Use the TypeScript operator <code>&amp;</code> as needed. If you didn't use any text preprocessors, you can set the value to <code>Record&lt;string, never&gt;</code>.</p> <p>That's it! Your language should now be selectable from the dropdown, and may work perfectly fine already. If you don't already have a dictionary to test with, check out Dictionaries. For more advanced features, read on.</p>"},{"location":"contributing/language-features/#language-features","title":"Language Features","text":"<p>You should first have the repo set up locally according to the instructions in the contributing guidelines.</p> <p>A language descriptor in <code>language-descriptors.js</code> has several optional fields for more advanced features. We've already mentioned <code>textPreprocessors</code>, but there are also <code>languageTransforms</code>, <code>textPostprocessors</code>, <code>isTextLookupWorthy</code>, and <code>readingNormalizer</code>. Let's go through them (see also the full type definition in <code>language-descriptors.d.ts</code>).</p>"},{"location":"contributing/language-features/#text-preprocessors","title":"Text Preprocessors","text":"<p>The scanned text may not exactly match the word in the dictionary. For example, an English dictionary will likely contain the word \"read\", but the text may contain \"Read\" or \"READ\". To handle cases like this, we use text preprocessors.</p> language.d.ts<pre><code>export type TextProcessor&lt;T = unknown&gt; = {\n  name: string;\n  description: string;\n  options: TextProcessorOptions&lt;T&gt;;\n  process: TextProcessorFunction&lt;T&gt;;\n};\n</code></pre> <p>Every text preprocessor has:</p> <ul> <li>A <code>name</code> and <code>description</code></li> <li>An array of <code>options</code>, most commonly just <code>[false, true]</code>, that control the behavior of the <code>process</code> function.</li> <li>A <code>process</code> function that takes a string and a setting and returns a string</li> </ul> <p>Here are the <code>CapitalizationPreprocessors</code> used in the Dutch example:</p> <pre><code>/** @type {import('language').TextProcessor&lt;boolean&gt;} */\nexport const decapitalize = {\n  name: \"Decapitalize text\",\n  description: \"CAPITALIZED TEXT \u2192 capitalized text\",\n  options: basicTextProcessorOptions, // [false, true]\n  process: (str, setting) =&gt; (setting ? str.toLowerCase() : str),\n};\n\n/** @type {import('language').TextProcessor&lt;boolean&gt;} */\nexport const capitalizeFirstLetter = {\n  name: \"Capitalize first letter\",\n  description: \"lowercase text \u2192 Lowercase text\",\n  options: basicTextProcessorOptions, // [false, true]\n  process: (str, setting) =&gt;\n    setting ? str.charAt(0).toUpperCase() + str.slice(1) : str,\n};\n</code></pre> <p>When applying preprocessors, each combination will be separately applied and looked up. Since each of these two preprocessors has two options, there are 2*2=4 possible combinations. For the input string <code>reaD</code>, the following strings will be looked up:</p> <ul> <li><code>reaD</code> (both preprocessors off)</li> <li><code>ReaD</code> (only <code>capitalizeFirstLetter</code> on)</li> <li><code>read</code> (only <code>decapitalize</code> on)</li> <li><code>Read</code> (both preprocessors on)</li> </ul> <p>Note that the order of text processors can matter. Had we put capitalizeFirstLetter before decapitalize, the 4th string would be <code>read</code> instead of <code>Read</code>.</p>"},{"location":"contributing/language-features/#letter-variants","title":"Letter Variants","text":"<p>A letter or a group of letters may have multiple variants in a language. For example, in German, \"\u00df\" can be written as \"ss\" and vice versa, or in Japanese every kana has a hiragana and a katakana variant. To handle this, we use a bidirectional conversion preprocessor.</p> german-text-preprocessors.js<pre><code>/** @type {import('language').BidirectionalConversionPreprocessor} */\nexport const eszettPreprocessor = {\n  name: 'Convert \"\u00df\" to \"ss\"',\n  description: \"\u00df \u2192 ss, \u1e9e \u2192 SS and vice versa\",\n  options: [\"off\", \"direct\", \"inverse\"],\n  process: (str, setting) =&gt; {\n    switch (setting) {\n      case \"off\":\n        return str;\n      case \"direct\":\n        return str.replace(/\u1e9e/g, \"SS\").replace(/\u00df/g, \"ss\");\n      case \"inverse\":\n        return str.replace(/SS/g, \"\u1e9e\").replace(/ss/g, \"\u00df\");\n    }\n  },\n};\n</code></pre> <p>These have three options: off, direct, and inverse, and the <code>process</code> function must handle each of them.</p>"},{"location":"contributing/language-features/#removing-diacritics","title":"Removing Diacritics","text":"<p>In some cases (e.g. German umlauts), diacritics are near-ubiquitous. However some languages (such as Latin, Arabic etc) do not commonly use diacritics, but only in specific kinds of texts (e.g dictionaries, texts for children or learners). In these cases, the dictionaries that Yomitan uses will likely not contain diacritics, but the text may contain them. To handle this, we use a diacritics removal preprocessor.</p> <p>This kind of text processing is to a degree interdependent with the dictionaries available for the language.</p>"},{"location":"contributing/language-features/#deinflection-rules-aka-language-transforms","title":"Deinflection Rules (a.k.a. Language Transforms)","text":"<p>Deinflection is the process of converting a word to its base or dictionary form. For example, \"running\" would be deinflected to \"run\". This is useful for finding the word in the dictionary, as well as helping the user understand the grammar (morphology) of the language.</p> <p>These grammatical rules are located in files such as <code>english-transforms.js</code>.</p> <p>Not all the grammatical rules of a language can or need to be implemented in the transforms file. Even a little bit goes a long way, and you can always add more rules later. For every couple rules you add, write some tests in the respective file (see the writing tests section below). This will help you verify that your rules are correct, and make sure nothing is accidentally broken along the way.</p> <p>Transforms files should export a <code>LanguageTransformDescriptor</code>, which is then imported in <code>language-descriptors.js</code>.</p> language-transformer.d.ts<pre><code>export type LanguageTransformDescriptor = {\n    language: string;\n    conditions: ConditionMapObject;\n    transforms: {\n        [name: string]: Transform;\n    };\n};\n</code></pre> <ul> <li><code>language</code> is the ISO code of the language</li> <li><code>conditions</code> are an object containing parts of speech and grammatical forms that are used to check which deinflections make sense. They are referenced by the deinflection rules.</li> <li><code>transforms</code> are the actual deinflection rules</li> </ul> <p>Let's try and write a bit of deinflection for English, from scratch.</p> english-transforms.js<pre><code>import { suffixInflection } from \"../language-transforms.js\";\n\nexport const englishTransforms = {\n  language: \"en\",\n  conditions: {},\n  transforms: {\n    plural: {\n      name: \"plural\",\n      description: \"Plural form of a noun\",\n      rules: [suffixInflection(\"s\", \"\", [], [])],\n    },\n  },\n};\n</code></pre> <p>This is a simple example for English, where the only deinflection rule is to remove the \"s\" from the end of a noun to get the singular form. The <code>suffixInflection</code> function is a helper that creates a deinflection rule for a suffix. It takes the suffix to remove, what to replace it with, and two more parameters for conditions, which we will look at next. The <code>suffixInflection</code> is the most common type of deinflection rule across languages. The inner <code>plural</code> is the displayed description while looking up, and the outer <code>plural</code> is a name only to be referenced internally within the file.</p> <p>For the input string \"cats\", the following strings will be looked up:</p> <ul> <li><code>cats</code> (no deinflection)</li> <li><code>cat</code> (deinflected by the <code>plural</code> rule)</li> </ul> <p>If the dictionary contains an entry for <code>cat</code>, it will successfully match the 2nd looked up string, (as shown in the image). Note the \ud83e\udde9 symbol and the <code>plural</code> rule.</p> <p>However, this rule will also match the word \"reads\", and show the verb \"read\" from the dictionary, marked as being <code>plural</code>. This makes no sense, and we can use conditions to prevent it. Let's add a condition and use it in the rule.</p> <pre><code>conditions: {\n  n: {\n    name: 'Noun',\n    isDictionaryForm: true,\n  },\n},\ntransforms: {\n  \"plural\": {\n    name: \"plural\",\n    description: \"Plural form of a noun\",\n    rules: [\n      suffixInflection(\"s\", \"\", [], [\"n\"])\n    ],\n  },\n},\n</code></pre> <p>Now, only dictionary entries marked with the same \"n\" condition will be eligible for matching the <code>plural</code> rule. The verb \"read\" should be marked as \"v\" in the dictionary, and will no longer be matched by the <code>plural</code> rule. The entries in the dictionary need to be marked with the exact same conditions defined in the <code>conditions</code> object. The <code>isDictionaryForm</code> field can be set to <code>false</code>, to allow some conditions to be used only in between rules, and not in the dictionary. In most cases however, it will be set to <code>true</code>.</p> <p></p> <p>Now consider the word <code>dogs'</code>, as in the <code>the dogs' bones</code>. This is the possessive of a plural noun. We can add a rule for the possessive:</p> <pre><code>{\n  name: \"possessive\",\n  description: \"Possessive form of a noun\",\n  rules: [\n    suffixInflection(\"'\", \"\", [], [\"n\"])\n  ],\n},\n</code></pre> <p>However, the only <code>conditionOut</code> of this rule, <code>n</code>, does not match any <code>conditionIn</code> of the <code>plural</code> rule, because the <code>plural</code> rules <code>conditionsIn</code> are an empty array. To fix this, we can add a condition to the <code>plural</code> rule:</p> <pre><code>{\n  name: \"plural\",\n  description: \"Plural form of a noun\",\n  rules: [\n    suffixInflection(\"s\", \"\", [\"n\"], [\"n\"])\n  ],\n},\n</code></pre> <p>Now the rules will chain together, as shown in the image. Chaining can be very useful (for agglutinative languages it is indispensable), but may cause unexpected behavior. For example, <code>boss</code> will now display results for the word <code>bo</code> (e.g. the staff) with the <code>plural</code> rule applied twice, i.e. it can chain with itself because the <code>conditionsIn</code> and <code>conditionsOut</code> are the same. This leads us to the actual implementation of the <code>plural</code> rule in <code>english-transforms.js</code>:</p> <pre><code>conditions: {\n  n: {\n    name: \"Noun\",\n    isDictionaryForm: true,\n    subConditions: [\"np\", \"ns\"],\n  },\n  np: {\n    name: \"Noun plural\",\n    isDictionaryForm: true,\n  },\n  ns: {\n    name: \"Noun singular\",\n    isDictionaryForm: true,\n  },\n},\ntransforms: {\n  \"plural\": {\n    name: \"plural\",\n    description: \"Plural form of a noun\",\n    rules: [\n      suffixInflection(\"s\", \"\", [\"np\"], [\"ns\"])\n    ],\n  },\n},\n</code></pre> <p>Since <code>ns</code> and <code>np</code> are subconditions of <code>n</code> they will both match with <code>n</code>, but not with each other. This covers all of the requirements we have considered.</p> <p>The <code>suffixInflection</code> is one of a few helper functions - you can write more complex rules, using regex and a function for deinflecting. There are examples of this across the language transforms files.</p>"},{"location":"contributing/language-features/#writing-deinflection-tests","title":"Writing Deinflection Tests","text":"<p>Now that you have added a couple deinflection rules, you might want to start writing some tests to check if the deinflections are behaving correctly. Let's say we wanted to test the behavior of our <code>plural</code> and <code>possessive</code> rules and even them combined. Our test file should look like this:</p> english-transforms.test.js<pre><code>import { englishTransforms } from \"../../ext/js/language/en/english-transforms.js\";\nimport { LanguageTransformer } from \"../../ext/js/language/language-transformer.js\";\nimport { testLanguageTransformer } from \"../fixtures/language-transformer-test.js\";\n\nconst tests = [\n  {\n    category: \"plurals and possessive\",\n    valid: true,\n    tests: [\n      { term: \"cat\", source: \"cats\", rule: \"ns\", reasons: [\"plural\"] },\n      { term: \"cat\", source: \"cat's\", rule: \"ns\", reasons: [\"possessive\"] },\n      {\n        term: \"cat\",\n        source: \"cats'\",\n        rule: \"ns\",\n        reasons: [\"plural\", \"possessive\"],\n      },\n    ],\n  },\n];\n\nconst languageTransformer = new LanguageTransformer();\nlanguageTransformer.addDescriptor(englishTransforms);\ntestLanguageTransformer(languageTransformer, tests);\n</code></pre> <p>The part we want to examine is the <code>test</code> array. The other things are common across all test files.</p> <ul> <li><code>term</code> is the final form of the deinflected word.</li> <li><code>source</code> is the source word to be deinflected to <code>term</code>.</li> <li><code>rule</code> is the final condition of <code>term</code>. Here, we used <code>ns</code> because <code>cat</code> is a singular noun.</li> <li><code>reasons</code> represents the chain of deinflection rules needed to get from <code>source</code> to <code>term</code>.</li> </ul> <p>You can check that all the tests pass by running <code>npm run test:unit</code>.</p> <p>This command runs all Yomitan unit test files. To only run a single test file, you can instead opt for <code>npx vitest &lt;file-name&gt;</code>.</p> <p>Now, we may want to verify that <code>boss</code> really does not deinflect to <code>bo</code>. You can add to the <code>tests</code> array:</p> <pre><code>{\n    category: 'invalid deinflections',\n    valid: false,\n    tests: [\n        {term: 'boss', source: 'bo', rule: 'ns', reasons: ['plural', 'plural']},\n    ],\n},\n</code></pre> <p>Here, by setting <code>valid</code> to <code>false</code>, we are telling the test function to fail this test case if only <code>boss</code> deinflects to <code>bo</code> with the <code>ns</code> condition under a double <code>plural</code> rule.</p> <p>You can also optionally pass a <code>preprocess</code> helper function to <code>testLanguageTransformer</code>. Refer to the language transforms test files for its specific use case.</p>"},{"location":"contributing/language-features/#text-postprocessors","title":"Text Postprocessors","text":"<p>In special cases, text may need to be modified after deinflection. These work exactly like text preprocessors, but are applied after deinflection. Currently, this is only used for Korean, where the Hangul text is disassembled into jamo during preprocessing, and so must be reassembled after deinflection.</p>"},{"location":"contributing/language-features/#text-lookup-worthiness","title":"Text Lookup Worthiness","text":"<p>Some features include checking whether a string is possibly a word in the language. For example, trying to look up, in an English dictionary, a word written with non-Latin characters (e.g. \"\u65e5\u672c\u8a9e\") will never yield any results. To prevent unnecessary lookups, an <code>isTextLookupWorthy</code> function can be provided, otherwise all text will be looked up.</p>"},{"location":"contributing/language-features/#reading-normalizers","title":"Reading Normalizers","text":"<p>In certain languages, dictionary entries may contain readings as a key to read words, e.g. Kana for Japanese and Pinyin for Chinese. Sometimes, dictionaries may be inconsistent in how they store these readings, leading to the word entries often being split when looked up even though they share the same reading. In these cases, you can use a <code>readingNormalizer</code> function to normalize the readings to a common format.</p>"},{"location":"contributing/language-features/#stuck","title":"Stuck?","text":"<p>If you have any questions, please feel free to open a Discussion on Github, or find us on TheMoeWay Discord at #yomitan-development.</p>"},{"location":"contributing/npm-scripts/","title":"npm Scripts","text":"<p>This file documents the scripts available in the package.json file. Scripts can be executed by running <code>npm run &lt;name&gt;</code>.</p> <ul> <li> <p><code>bench</code>   Runs performance benchmarks.</p> </li> <li> <p><code>build</code>   Builds packages for all of the primary build targets and outputs them to the builds folder in the root project directory.</p> </li> <li> <p><code>build:libs</code>   Rebuilds all of the third-party dependencies that the extension uses.</p> </li> <li> <p><code>test</code>   Runs all of the tests.</p> </li> <li> <p><code>test:fast</code>   Runs most of the tests that are used more frequently in the typical development process.</p> </li> <li> <p><code>test:static-analysis</code>   Runs all of the static analysis tests (excluding JSON).</p> </li> <li> <p><code>test:js</code>   Runs eslint on all of the JavaScript and TypeScript files in the project.</p> </li> <li> <p><code>test:json</code>   Runs all JSON tests.</p> </li> <li> <p><code>test:json:format</code>   Runs eslint on all of the JSON files in the project.</p> </li> <li> <p><code>test:json:types</code>   Performs type checking on all of the JSON files in the project.   Running this script often takes a long time since it has to validate a lot of files with complex types.</p> </li> <li> <p><code>test:css</code>   Runs stylelint on all of the CSS files in the project.</p> </li> <li> <p><code>test:html</code>   Runs html-validate on all of the HTML files in the project.</p> </li> <li> <p><code>test:md</code>   Runs prettier on all of the Markdown files in the project.</p> </li> <li> <p><code>test:md:write</code>   Uses prettier to fix all issues it encounters with files.</p> </li> <li> <p><code>test:ts</code>   Runs TypeScript validation on all of the JavaScript and TypeScript files in the project.</p> </li> <li> <p><code>test:ts:main</code>   Runs TypeScript validation on the files in the ext folder.</p> </li> <li> <p><code>test:ts:dev</code>   Runs TypeScript validation on the files in the dev folder.</p> </li> <li> <p><code>test:ts:test</code>   Runs TypeScript validation on the files in the test folder.</p> </li> <li> <p><code>test:ts:bench</code>   Runs TypeScript validation on the files in the benches folder.</p> </li> <li> <p><code>test:unit</code>   Runs all of the unit tests in the project using vitest.</p> </li> <li> <p><code>test:unit:write</code>   Overwrites the expected test output data for some of the larger tests.   This usually only needs to be run when something modifies the format of dictionary entries or Anki data.</p> </li> <li> <p><code>test:unit:options</code>   Runs unit tests related to the extension's options and their upgrade process.</p> </li> <li> <p><code>test:build</code>   Performs a dry run of the build process without generating any files.</p> </li> <li> <p><code>license-report:html</code>   Generates a file containing license information about the third-party dependencies the extension uses.   The resulting file is located at ext/legal-npm.html.</p> </li> <li> <p><code>license-report:markdown</code>   Generates a Markdown table containing license information about the third-party dependencies the extension uses.   This table is located in the README.md file</p> </li> <li> <p><code>prepare</code>   Sets up husky for some git pre-commit tasks.</p> </li> </ul>"},{"location":"dictionaries/","title":"Using dictionaries","text":""},{"location":"dictionaries/#dictionaries","title":"Dictionaries","text":"<p>You must download and import the dictionaries you wish to use in order to enable Yomitan definition lookups. There are several free dictionaries available for Yomitan, some of them with glossaries available in different languages.</p> <p>Be aware that non-English dictionaries generally contain fewer entries than their English counterparts. Even if your primary language is not English, you may consider also importing the English version for better coverage.</p>"},{"location":"dictionaries/#recommended-dictionaries","title":"Recommended Dictionaries","text":""},{"location":"dictionaries/#japanese","title":"Japanese","text":"<ul> <li>Jitendex - An improved version of JMdict for Yomitan. It features better formatting and some other improvements, and is actively being improved by its author.</li> <li>JMdict - There are daily automatically updated builds of JMdict for Yomitan available in this repository. It is available in multiple languages and formats, but we recommend installing the more modern Jitendex for English users.</li> <li>JMnedict - Lists readings of person/place/organization names and other proper nouns.</li> <li>KANJIDIC - An English dictionary listing readings, meanings, and other info about kanji characters.</li> <li>BCCWJ Frequency Dictionary - A frequency dictionary based on the Balanced Corpus of Contemporary Written Japanese.</li> </ul>"},{"location":"dictionaries/#other-languages","title":"Other Languages","text":"<ul> <li>Multilingual</li> <li>KTY - Wiktionaries in various languages converted to Yomitan format.</li> <li>Wikipedia for Yomitan - All of Wikipedia in Yomitan for various languages.</li> <li>Korean</li> <li>KRDICT/STDICT - Korean dictionaries for Yomitan.</li> <li>Cantonese</li> <li>words.hk for Yomitan - A free Cantonese-English and Cantonese-Cantonese dictionary for Yomitan.</li> <li>Mandarin</li> <li>CC-CEDICT for Yomitan - A free Chinese-English dictionary for Yomitan.</li> </ul>"},{"location":"dictionaries/#epwing-dictionaries","title":"EPWING Dictionaries","text":"<p>Yomitan supports dictionaries in the esoteric but popular EPWING format. They were often utilized in portable electronic dictionaries. These dictionaries are often sought after by language learners for their correctness and excellent coverage of the Japanese language.</p> <p>Unfortunately, as most of the dictionaries released in this format are proprietary, you will need to procure these dictionaries yourself and import them using Yomitan Import. Check the project page for additional details.</p>"},{"location":"dictionaries/#bulk-importing-dictionaries","title":"Bulk Importing Dictionaries","text":"<p>Yomitan also supports exporting and importing your entire collection of dictionaries.</p>"},{"location":"dictionaries/#importing-a-dictionary-collection","title":"Importing a Dictionary Collection","text":"<ul> <li>Go to Yomitan's settings page (click on the extension's icon then click on the cog icon from the popup)</li> <li>Click <code>Import Dictionary Collection</code> and select the database file you want to import</li> <li>Wait for the import to finish then turn all the dictionaries back on from the <code>Dictionaries &gt; Configure installed and enabled dictionaries</code> section</li> <li>Refresh the browser tab to see the dictionaries in effect</li> </ul>"},{"location":"dictionaries/#exporting-the-dictionary-collection","title":"Exporting the Dictionary Collection","text":"<ul> <li>Click <code>Export Dictionary Collection</code> from the backup section of Yomitan's settings page</li> <li>It will show you a progress report as it exports the data then initiates a   download for a file named something like <code>yomitan-dictionaries-YYYY-MM-DD-HH-mm-ss.json</code>   (e.g. <code>yomitan-dictionaries-2023-07-05-02-42-04.json</code>)</li> </ul>"},{"location":"dictionaries/#importing-and-exporting-personal-configuration","title":"Importing and Exporting Personal Configuration","text":"<p>Note that you can also similarly export and import your Yomitan settings from the <code>Backup</code> section of the Settings page.</p> <p>You should be able to replicate your exact Yomitan setup across devices by exporting your settings and dictionary collection from the source device then importing those from the destination.</p>"},{"location":"dictionaries/making-yomitan-dictionaries/","title":"Making Yomitan Dictionaries","text":"<p>This document provides an overview on how to create your own Yomitan dictionary.</p> <ul> <li>Tools</li> <li>Read the Schemas</li> <li>Packaging A Dictionary</li> <li>Examples</li> <li>Schema Validation</li> <li>Conjugation</li> <li>Tag Categories</li> </ul>"},{"location":"dictionaries/making-yomitan-dictionaries/#tools","title":"Tools","text":"<ul> <li>Yomichan Dictionary Builder: A node package that simplifies the process of making dictionaries, particularly useful for those using TypeScript or JavaScript.</li> <li>hasUTF16SurrogatePairAt: Important for checking if a kanji/hanzi is a surrogate pair, which affects string operations in JavaScript.</li> <li>japanese-furigana-normalize: A utility function to normalize Japanese readings containing furigana, ensuring proper alignment with kanji characters.</li> </ul>"},{"location":"dictionaries/making-yomitan-dictionaries/#read-the-schemas","title":"Read the Schemas","text":"<p>Familiarity with the Yomitan schemas is essential. These schemas define the structure of Yomitan dictionaries. Helpful resources for interpreting JSON schemas include codebeautify, json-schema-viewer, and jsonhero.</p> <p>Below is a list of Yomitan dictionary schemas, their expected filenames, and their usage:</p> Schema Expected Filename Usage <code>dictionary-index-schema.json</code> <code>index.json</code> Metadata about the dictionary. Please include as much detail as possible. <code>dictionary-kanji-bank-v3-schema.json</code> <code>kanji_bank_${number}.json</code> Information used in the kanji viewer - meanings, readings, statistics, and codepoints. <code>dictionary-kanji-meta-bank-v3-schema.json</code> <code>kanji_meta-bank_${number}.json</code> Stores kanji frequency data. <code>dictionary-tag-bank-v3-schema.json</code> <code>tag_bank_${number}.json</code> Defines tags for kanji and term dictionaries, like parts of speech or kanken level. <code>dictionary-term-bank-v3-schema.json</code> <code>term_bank_${number}.json</code> Stores dictionary readings, definitions, etc. <code>dictionary-term-meta-bank-v3-schema.json</code> <code>term_meta_bank_${number}.json</code> Stores meta information about terms, such as frequency data and pitch accent data."},{"location":"dictionaries/making-yomitan-dictionaries/#adding-custom-css","title":"Adding Custom CSS","text":"<p>You can add custom CSS to a dictionary simply by adding a <code>styles.css</code> file to the root of the dictionary zip archive. This file will be loaded by Yomitan and applied to the dictionary viewer with the styles scoped to the dictionary. For example, observe the <code>styles.css</code> file in the official test dictionary.</p>"},{"location":"dictionaries/making-yomitan-dictionaries/#packaging-a-dictionary","title":"Packaging A Dictionary","text":"<p>A dictionary can contain various types of information within the zip file. After creating an <code>index.json</code> and the relevant data files, zip them with all data <code>.json</code> files in the root directory of the zip, not in subfolders. Use the highest compression level possible to reduce the size.</p>"},{"location":"dictionaries/making-yomitan-dictionaries/#examples","title":"Examples","text":"<ul> <li>The official test dictionary showcases the full range of features available in Yomitan dictionaries.</li> </ul>"},{"location":"dictionaries/making-yomitan-dictionaries/#schema-validation","title":"Schema Validation","text":"<p>To validate schemas, configure VSCode to validate schemas or use a website such as jsonschemavalidator.</p> <p>For VSCode validation, use the following settings JSON:</p> <pre><code>  \"json.schemas\": [\n    {\n      \"fileMatch\": [\"kanji_bank_*.json\"],\n      \"url\": \"https://github.com/themoeway/yomitan/raw/master/ext/data/schemas/dictionary-kanji-bank-v3-schema.json\"\n    },\n    {\n      \"fileMatch\": [\"kanji_meta_bank_*.json\"],\n      \"url\": \"https://github.com/themoeway/yomitan/raw/master/ext/data/schemas/dictionary-kanji-meta-bank-v3-schema.json\"\n    },\n    {\n      \"fileMatch\": [\"tag_bank_*.json\"],\n      \"url\": \"https://github.com/themoeway/yomitan/raw/master/ext/data/schemas/dictionary-tag-bank-v3-schema.json\"\n    },\n    {\n      \"fileMatch\": [\"term_bank_*.json\"],\n      \"url\": \"https://github.com/themoeway/yomitan/raw/master/ext/data/schemas/dictionary-term-bank-v3-schema.json\"\n    },\n    {\n      \"fileMatch\": [\"term_meta_bank_*.json\"],\n      \"url\": \"https://github.com/themoeway/yomitan/raw/master/ext/data/schemas/dictionary-term-meta-bank-v3-schema.json\"\n    }\n  ],\n</code></pre>"},{"location":"dictionaries/making-yomitan-dictionaries/#conjugation","title":"Conjugation","text":"<p>For Yomitan to conjugate Japanese terms, they need the appropriate part of speech tag. The part of speech labels are documented on the official JMDict page. For other languages, find the part of speech tags in <code>ext/js/language/{language}/{language}-transforms.js</code> under the <code>conditions</code> label, for labels that aren't prefixed with \"Intermediate\".</p>"},{"location":"dictionaries/making-yomitan-dictionaries/#tag-categories","title":"Tag Categories","text":"<p>The second item in the array of the tag bank schema determines the tag category, affecting the tag color in the user interface. The categories include:</p> <ul> <li>name</li> <li>expression</li> <li>popular</li> <li>frequent</li> <li>archaism</li> <li>dictionary</li> <li>frequency</li> <li>partOfSpeech</li> <li>search</li> <li>pronunciation-dictionary</li> <li>search</li> </ul> <p>You can view the tag colors here.</p>"},{"location":"dictionaries/making-yomitan-dictionaries/#community-contributions","title":"Community Contributions","text":"<p>If you have any questions, need help, or want to share a new dictionary, feel free to pop in the Yomitan Discord server. We're happy to help you get started!</p>"},{"location":"other/faq/","title":"FAQ","text":""},{"location":"other/faq/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>I can't scan text in Firefox!</p> <p>In Firefox's Manifest V3, host permissions are treated as opt-in. For Yomitan to work properly, the recommended permissions must be explicitly set. In the Yomitan welcome page, go to the <code>Recommended Permissions (Important)</code> section and check <code>Enable recommended permissions</code>.</p> <p>I'm having problems importing dictionaries in Firefox, what do I do?</p> <p>Yomitan uses the cross-browser IndexedDB system for storing imported dictionary data into your user profile. Although everything \"just works\" in Chrome, depending on settings, Firefox users can run into problems due to browser bugs. Yomitan catches errors and tries to offer suggestions about how to work around Firefox issues, but in general at least one of the following solutions should work for you:</p> <ul> <li>Make sure you have cookies enabled. It appears that disabling them also disables IndexedDB for some reason. You   can still have cookies be disabled on other sites; just make sure to add the Yomitan extension to the whitelist of   whatever tool you are using to restrict cookies. You can get the extension \"URL\" by looking at the address bar when   you have the search page open.</li> <li>Make sure that you have sufficient disk space available on the drive Firefox uses to store your user profile.   Firefox limits the amount of space that can be used by IndexedDB to a small fraction of the disk space actually   available on your computer.</li> <li>Make sure that you have history set to \"Remember history\" enabled in your privacy settings. When this option is   set to \"Never remember history\", IndexedDB access is once again disabled for an inexplicable reason.</li> <li>As a last resort, try using the Refresh Firefox   feature to reset your user profile. It appears that the Firefox profile system can corrupt itself preventing   IndexedDB from being accessible to Yomitan.</li> </ul> <p>Will you add support for online dictionaries?</p> <p>Online dictionaries will not be implemented because it is not possible to support them in a robust way. In order to perform deinflection, Yomitan must execute dozens of database queries for every single word. Factoring in network latency and the fragility of web scraping, it would not be possible to maintain a good and consistent user experience.</p> <p>Is it possible to use Yomitan with files saved locally on my computer with Chrome?</p> <p>In order to use Yomitan with local files in Chrome, you must first tick the Allow access to file URLs checkbox for Yomitan on the extensions page. Due to the restrictions placed on browser addons in the WebExtensions model, it will likely never be possible to use Yomitan with PDF files.</p> <p>Is it possible to delete individual dictionaries without purging the database?</p> <p>Yomitan is able to delete individual dictionaries, but keep in mind that this process can be very slow and can cause the browser to become unresponsive. The time it takes to delete a single dictionary can sometimes be roughly the same as the time it originally took to import, which can be significant for certain large dictionaries.</p> <p>Why aren't EPWING dictionaries bundled with Yomitan?</p> <p>The vast majority of EPWING dictionaries are proprietary, so they are unfortunately not able to be included in this extension due to copyright reasons.</p>"},{"location":"other/permissions/","title":"Yomitan Permissions","text":"<ul> <li> <p><code>&lt;all_urls&gt;</code>    Yomitan requires access to all URLs in order to run scripts to scan text and show the definitions popup,   request audio for playback and download, and connect with Anki.</p> </li> <li> <p><code>storage</code> and <code>unlimitedStorage</code>    Yomitan uses storage permissions in order to save extension settings and dictionary data.   <code>unlimitedStorage</code> is used to help prevent web browsers from unexpectedly   deleting dictionary data.</p> </li> <li> <p><code>declarativeNetRequest</code>    Yomitan uses this permission to ensure certain requests have valid and secure headers.   This sometimes involves removing or changing the <code>Origin</code> request header,   as this can be used to fingerprint browser configuration.</p> </li> <li> <p><code>scripting</code>    Yomitan needs to inject content scripts and stylesheets into webpages in order to   properly display the search popup.</p> </li> <li> <p><code>contextMenus</code>    Yomitan adds a context menu interface that lets you look up highlighted words.</p> </li> <li> <p><code>offscreen</code> (Chrome only)    Yomitan uses this permission to create a secondary backend document that has DOM access, given that Manifest v3   service workers do not. Service workers can then reach out to out to this document in order to complete   actions that require access to DOM APIs, such as any that require clipboard access.</p> </li> <li> <p><code>clipboardWrite</code>    Yomitan supports simulating the <code>Ctrl+C</code> (copy to clipboard) keyboard shortcut   when a definitions popup is open and focused.</p> </li> <li> <p><code>clipboardRead</code> (optional)    Yomitan supports automatically opening a search window when Japanese text is copied to the clipboard   while the browser is running, depending on how certain settings are configured.   This allows Yomitan to support scanning text from external applications, provided there is a way   to copy text from those applications to the clipboard.</p> </li> <li> <p><code>nativeMessaging</code> (optional, unavailable on Firefox for Android)    Yomitan has the ability to communicate with an optional native messaging component in order to support   parsing large blocks of Japanese text using   MeCab.   The installation of this component is optional and is not included by default.</p> </li> </ul>"},{"location":"other/supported-languages/","title":"Supported Languages","text":"<p>Yomitan supports a variety of languages, although the level of support may vary depending on the extent to which deinflections and text transforms have been implemented.</p> <p>These are the languages currently supported by Yomitan:</p> Language Code Albanian sq Ancient Greek grc Arabic ar Cantonese yue Chinese zh Dutch nl English en Finnish fi French fr German de Greek el Hungarian hu Indonesian id Italian it Japanese ja Khmer km Korean ko Lao lo Latin la Mongolian mn Old Irish sga Persian fa Polish pl Portuguese pt Romanian ro Russian ru Serbo-Croatian sh Spanish es Swedish sv Tagalog tl Thai th Turkish tr Vietnamese vi <p>For more information on how to add or improve support for a language, please refer to the language features documentation.</p>"},{"location":"other/yomichan-migration/","title":"Migrating from Yomichan (legacy)","text":""},{"location":"other/yomichan-migration/#migrating-from-yomichan","title":"Migrating from Yomichan","text":""},{"location":"other/yomichan-migration/#exporting-data","title":"Exporting Data","text":"<p>If you are an existing user of Yomichan, you can export your dictionary collection and settings such that they can be imported into Yomitan to reflect your setup exactly as it was.</p> <p>You can export your settings from Yomichan's Settings page. Go to the <code>Backup</code> section and click on <code>Export Settings</code>.</p> <p>Yomichan doesn't have first-class support to export the dictionary collection. Please follow the instructions provided in the following link to export your data: https://github.com/themoeway/yomichan-data-exporter#steps-to-export-the-data</p> <p>You can then import the exported files into Yomitan from the <code>Backup</code> section of the <code>Settings</code> page. Please see the section on importing dictionaries further below for more explicit steps.</p>"},{"location":"other/yomichan-migration/#custom-templates","title":"Custom Templates","text":"<p>If you do not use custom templates for Anki note creation, this section can be skipped.</p> <p>Due to security concerns, an alternate implementation of Handlebars is being used which behaves slightly differently. This revealed a bug in four of Yomitan's template helpers, which have now been fixed in the default templates. If your custom templates use the following helpers, please ensure their use matches the corrected forms.</p> Helper Example Corrected <code>formatGlossary</code> <code>{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}</code> <code>{{formatGlossary ../dictionary .}}</code> <code>furigana</code> <code>{{#furigana}}{{{definition}}}{{/furigana}}</code> <code>{{furigana definition}}</code> <code>furiganaPlain</code> <code>{{~#furiganaPlain}}{{{.}}}{{/furiganaPlain~}}</code> <code>{{~furiganaPlain .~}}</code> <code>dumpObject</code> <code>{{#dumpObject}}{{{.}}}{{/dumpObject}}</code> <code>{{dumpObject .}}</code> <p>Authors of custom templates may be interested to know that other helpers previously used and documented in the block form (e.g. <code>{{#set \"key\" \"value\"}}{{/set}}</code>), while not broken by this change, may also be replaced with the less verbose form (e.g. <code>{{set \"key\" \"value\"}}</code>). The default templates and helper documentation have been changed to reflect this.</p>"}]}